import { Injectable } from '@angular/core';
<<<<<<< HEAD
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { BehaviorSubject, Observable, throwError } from 'rxjs';
import { tap, catchError, map } from 'rxjs/operators';
import { environment } from '../../../environments/environment';

export interface User {
  id: number;
  username: string;
  fullname: string;
  email: string;
  role: 'ADMIN' | 'USER';
}

export interface RegisterRequest {
=======
import { BehaviorSubject, Observable } from 'rxjs';

export interface User {
  id: string;
>>>>>>> 15557ce36fc6be6a95003b0a49c0a3038c5c359f
  fullname: string;
  username: string;
  email: string;
  password: string;
<<<<<<< HEAD
  role?: string;
}

interface AuthResponse {
  success: boolean;
  message?: string;
  user?: User;
  role?: string;
  fullname?: string;
}

interface LoginResponse {
  success: boolean;
  message?: string;
  role?: string;
  fullname?: string;
  user?: User; // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° user field (‡∏Å‡∏£‡∏ì‡∏µ Backend ‡∏™‡πà‡∏á‡∏°‡∏≤‡∏Ñ‡∏£‡∏ö)
}

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  private apiUrl = environment.apiUrl + '/auth';
  private readonly USER_KEY = 'current_user';

  private currentUserSubject: BehaviorSubject<User | null>;
  public currentUser: Observable<User | null>;

  constructor(private http: HttpClient) {
    const storedUser = localStorage.getItem(this.USER_KEY);
    this.currentUserSubject = new BehaviorSubject<User | null>(
      storedUser ? JSON.parse(storedUser) : null
    );
    this.currentUser = this.currentUserSubject.asObservable();
  }

  public get currentUserValue(): User | null {
    return this.currentUserSubject.value;
  }

  // ==================== REGISTER ====================
  register(userData: RegisterRequest): Observable<any> {
    return this.http.post<AuthResponse>(`${this.apiUrl}/register`, userData, { withCredentials: true }).pipe(
      map(response => {
        if (response.success && response.user) {
          console.log('‚úÖ Register success', response.user);
          return response;
        }
        throw new Error(response.message || 'Registration failed');
      }),
      catchError(this.handleError)
    );
  }

  // ==================== LOGIN ====================
  login(username: string, password: string): Observable<any> {
    console.log('üîê Sending login request...');

    return this.http.post<LoginResponse>(
      `${this.apiUrl}/login`,
      { username, password },
      { withCredentials: true }
    ).pipe(
      map(response => {
        console.log('üì° Login response:', response);

        if (response.success) {
          // ‚úÖ ‡∏ñ‡πâ‡∏≤ Backend ‡∏™‡πà‡∏á user object ‡∏Ñ‡∏£‡∏ö‡∏°‡∏≤ ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏¢
          if (response.user) {
            console.log('‚úÖ Backend sent full user object');
            localStorage.setItem(this.USER_KEY, JSON.stringify(response.user));
            this.currentUserSubject.next(response.user);
            return response;
          }

          // ‚ö†Ô∏è ‡∏ñ‡πâ‡∏≤ Backend ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á user ‡∏Ñ‡∏£‡∏ö ‡∏™‡∏£‡πâ‡∏≤‡∏á temporary user
          // (‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å loadCurrentUser() ‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢)
          console.warn('‚ö†Ô∏è Backend did not send full user object, creating temporary user');
          const tempUser: User = {
            id: 0, // ‚ö†Ô∏è Temporary ID - must call loadCurrentUser() after
            username: username,
            fullname: response.fullname || '',
            email: '',
            role: response.role as 'ADMIN' | 'USER'
          };

          localStorage.setItem(this.USER_KEY, JSON.stringify(tempUser));
          this.currentUserSubject.next(tempUser);

          return response;
        }

        throw new Error(response.message || 'Login failed');
      }),
      catchError(this.handleError)
    );
  }

  // ==================== LOGOUT ====================
  logout(): Observable<void> {
  return this.http.post(`${this.apiUrl}/logout`, {}, { withCredentials: true }).pipe(
    tap(() => {
      console.log('‚úÖ Logout successful');
      localStorage.removeItem(this.USER_KEY);
      this.currentUserSubject.next(null);
    }),
    catchError(err => {
      console.error('‚ùå Logout error:', err);
      localStorage.removeItem(this.USER_KEY);
      this.currentUserSubject.next(null);
      return throwError(() => err);
    }),
    map(() => void 0)
  );
}
=======
  role: 'admin' | 'user'; // ‡πÄ‡∏û‡∏¥‡πà‡∏° role
  createdAt: Date;
}

@Injectable({
  providedIn: 'root',
})
export class AuthService {
  private readonly USERS_KEY = 'student_system_users';
  private readonly CURRENT_USER_KEY = 'student_system_current_user';

  // BehaviorSubject ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• current user
  private currentUserSubject: BehaviorSubject<any>;
  public currentUser: Observable<any>;

  constructor() {
    // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡∏à‡∏≤‡∏Å sessionStorage
    const storedUser = sessionStorage.getItem(this.CURRENT_USER_KEY);
    this.currentUserSubject = new BehaviorSubject<any>(
      storedUser ? JSON.parse(storedUser) : null
    );
    this.currentUser = this.currentUserSubject.asObservable();

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• demo user ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
    this.initializeDemoUsers();
  }

  // Getter ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ current user
  public get currentUserValue(): any {
    return this.currentUserSubject.value;
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á demo users ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
  private initializeDemoUsers(): void {
    const users = this.getUsers();
    if (users.length === 0) {
      const demoUsers: User[] = [
        {
          id: '1',
          fullname: '‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö',
          username: 'admin',
          email: 'admin@example.com',
          password: 'admin123',
          role: 'admin',
          createdAt: new Date(),
        },
        {
          id: '2',
          fullname: '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ',
          username: 'test',
          email: 'test@example.com',
          password: 'test123',
          role: 'user',
          createdAt: new Date(),
        },
      ];
      this.saveUsers(demoUsers);
    }
  }

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å Memory (‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
  private getUsers(): User[] {
    // ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Backend API
    // ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô Memory

    // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∞‡∏´‡∏≤‡∏¢‡πÄ‡∏°‡∏∑‡πà‡∏≠ refresh ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
    // ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏ñ‡∏≤‡∏ß‡∏£ ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ Backend Database

    const usersJson = sessionStorage.getItem(this.USERS_KEY);
    return usersJson ? JSON.parse(usersJson) : [];
  }

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  private saveUsers(users: User[]): void {
    sessionStorage.setItem(this.USERS_KEY, JSON.stringify(users));
  }

  // ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
  register(userData: any): boolean {
    const users = this.getUsers();

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ username ‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const existingUser = users.find((u) => u.username === userData.username);
    if (existingUser) {
      return false;
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á user ‡πÉ‡∏´‡∏°‡πà
    const newUser: User = {
      id: Date.now().toString(),
      fullname: userData.fullname,
      username: userData.username,
      email: userData.email,
      password: userData.password, // ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏ï‡πâ‡∏≠‡∏á hash password
      role: 'user', // user ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô role 'user'
      createdAt: new Date(),
    };

    users.push(newUser);
    this.saveUsers(users);

    console.log('‚úÖ ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', newUser);
    console.log('üìä ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö:', users.length, '‡∏Ñ‡∏ô');

    return true;
  }

  // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
  login(username: string, password: string): boolean {
    const users = this.getUsers();
    const user = users.find(
      (u) => u.username === username && u.password === password
    );

    if (user) {
      // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡∏ó‡∏µ‡πà login (‡πÑ‡∏°‡πà‡πÄ‡∏Å‡πá‡∏ö password)
      const { password, ...userWithoutPassword } = user;
      sessionStorage.setItem(
        this.CURRENT_USER_KEY,
        JSON.stringify(userWithoutPassword)
      );

      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó BehaviorSubject
      this.currentUserSubject.next(userWithoutPassword);

      console.log('‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', userWithoutPassword);
      return true;
    }

    console.log('‚ùå ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    return false;
  }

  // ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
  logout(): void {
    sessionStorage.removeItem(this.CURRENT_USER_KEY);
    this.currentUserSubject.next(null);
    console.log('üëã ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß');
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ login ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  isLoggedIn(): boolean {
    return sessionStorage.getItem(this.CURRENT_USER_KEY) !== null;
  }

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡∏ó‡∏µ‡πà login ‡∏≠‡∏¢‡∏π‡πà
  getCurrentUser(): any {
    const userJson = sessionStorage.getItem(this.CURRENT_USER_KEY);
    return userJson ? JSON.parse(userJson) : null;
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Admin ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  isAdmin(): boolean {
    const user = this.currentUserValue;
    return user && user.role === 'admin';
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô User ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  isUser(): boolean {
    const user = this.currentUserValue;
    return user && user.role === 'user';
  }

  // ‡∏î‡∏∂‡∏á role ‡∏Ç‡∏≠‡∏á user ‡∏ó‡∏µ‡πà login ‡∏≠‡∏¢‡∏π‡πà
  getRole(): string | null {
    const user = this.currentUserValue;
    return user ? user.role : null;
  }

  // ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö admin)
  getAllUsers(): User[] {
    return this.getUsers().map(({ password, ...user }) => user as any);
  }

  // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö reset ‡∏£‡∏∞‡∏ö‡∏ö)
  clearAllData(): void {
    sessionStorage.removeItem(this.USERS_KEY);
    sessionStorage.removeItem(this.CURRENT_USER_KEY);
    console.log('üóëÔ∏è ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß');
  }
}

/*
  üìù ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢:
>>>>>>> 15557ce36fc6be6a95003b0a49c0a3038c5c359f


  // ==================== LOAD CURRENT USER ====================
  loadCurrentUser(): Observable<User> {
    console.log('üîç Loading current user from /me endpoint...');

    return this.http.get<AuthResponse>(`${this.apiUrl}/me`, { withCredentials: true }).pipe(
      map(response => {
        console.log('üì° /me response:', response);

        if (response.success && response.user) {
          console.log('‚úÖ User loaded successfully:', response.user);

          // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å user ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°
          localStorage.setItem(this.USER_KEY, JSON.stringify(response.user));
          this.currentUserSubject.next(response.user);

          return response.user;
        }

        throw new Error(response.message || 'Failed to load user');
      }),
      catchError(err => {
        console.error('‚ùå Failed to load current user:', err);

        // ‚ö†Ô∏è ‡∏ñ‡πâ‡∏≤‡∏î‡∏∂‡∏á user ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏•‡∏ö session
        localStorage.removeItem(this.USER_KEY);
        this.currentUserSubject.next(null);

        return throwError(() => err);
      })
    );
  }

  // ==================== UTILITY METHODS ====================
  isLoggedIn(): boolean {
    return !!this.currentUserValue;
  }

  isAdmin(): boolean {
    return this.currentUserValue?.role === 'ADMIN';
  }

  isUser(): boolean {
    return this.currentUserValue?.role === 'USER';
  }

  getRole(): string | null {
    return this.currentUserValue?.role || null;
  }

  getUserId(): number | null {
    return this.currentUserValue?.id || null;
  }

  // ==================== ERROR HANDLER ====================
  private handleError(error: HttpErrorResponse) {
    let message = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î';

    console.error('üî¥ HTTP Error:', {
      status: error.status,
      statusText: error.statusText,
      error: error.error,
      message: error.message
    });

    if (error.error?.message) {
      message = error.error.message;
    } else if (error.status === 0) {
      message = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ';
    } else if (error.status === 401) {
      message = '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
    } else if (error.status === 400) {
      message = '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
    } else if (error.status === 500) {
      message = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á';
    }

    return throwError(() => new Error(message));
  }
}
